= 0.5.1 / 30Aug2012

  + Cod.bidir_pipe is now selectable.

= 0.5.0 / 12Jun2012

  + Process#wait will not throw Errno::ECHILD anymore.

= 0.4.4 / 7Mar2012

  + Uses IO.select in the server as well, not polling for accept. This should
    further reduce the CPU time consumed by servers. 
    
  ! Fixes a bug where server would hang forever with messages to return in
    its queue. 
    
  + Switching to YARD for documentation, please be patient while the whole 
    gets a workover. This should be finished by 0.4.6 at the latest.

= 0.4.3 / 28Feb2012

  ! Fixes a few bugs when using tcp channels (connection was not made or not
    closed properly).
    
  + Cod::ConnectionLost should be raised when the connection goes down. This 
    allows simply reconnecting on error, see 
    examples/bs_ping_pong/{ping,pong}.rb on how to do this.

= 0.4.2 / 15Feb2012

  ! Actively removes clients that have closed the sockets on their end
    (tcp_server)

= 0.4.1 / 23Jan2012
  + Cod.stdio returns a channel that is linked to this process' stdin and
    stdout. 

  + Cod.process spawns a process and allows communicating with that process
    via stdin/stdout.
    
  + Cod.bidir_pipe spawns two Cod.pipe's, one for writing to the other end, 
    one for reading from it. (see above...)
    
  + Small fixes, preparation for connection robustness

== 0.4.0 / 29Nov2011

  * A complete rewrite, focusing on lean implementation and logical/useful 
    error conditions. 

== 0.3.1 / 25Aug2011

  + Large improvements in resilience to crashes, reconnects are now attempted
    but can be improved further. 

  + Both sides of an 1:n directory:topic structure can now crash without 
    permanent message loss. 

  + tcp channels now have a #connected? method that indicates permanent 
    unrecoverable disconnection.
    
  - at_fork extension is now permanently gone. 

== 0.3 / 20Jul2011

  + Cod.tcpserver and Cod.tcp channels. Allows direct connection via 
    TCP/IP with the same semantics.
  
  - You will now need to always provide a name for beanstalk channels. There
    is currently no reliable way to generate unique names at the library 
    level.

== 0.2 / 2011-04-27

  * Cod::Client now allows both synchronous (with answer) and asynchronous
    calls (#call vs. #notify).

== 0.1 / 2011-04-20

  * Basic communication via Beanstalk and IO.pipe. 
  * Client-Service communication
  * Publish-Subscribe communication
